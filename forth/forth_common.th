#ifndef FORTH_COMMON_TH_
#define FORTH_COMMON_TH_

// Baby ITC Forth
// Forth's  W   is in M
//          X   is in K
//          IP  is in I
//          PSP is in D
//          RSP is in J
// relocation offset is in F
// alternate (C) stack is in O
// temporaries : B C E G H L N

#define W   M
#define X   K
#define IP  I
#define PSP D
#define RSP J

#define BAS F

// save and restore Forth registers on a stack, for calling other ABIs
#define pushregs(o) push(o,W)   \
                    push(o,X)   \
                    push(o,IP)  \
                    push(o,PSP) \
                    push(o,RSP)

#define  popregs(o)  pop(o,RSP) \
                     pop(o,PSP) \
                     pop(o,IP)  \
                     pop(o,X)   \
                     pop(o, W)

#define jmp(Reg)    p <- Reg + BAS
#define ccall(Loc)  o <- RSP - 1 ; pushregs(o) ; push(o,p + 3); goto(Loc) ; popregs(o)

#define reloc(Label)        BAS + @Label
#define goto(Label)         p <- reloc(Label)
#define push(Sp,Expr)       [Sp] <- Expr ; Sp <- Sp - 1
#define pop(Sp,Reg)         Sp <- Sp + 1 ; Reg <- [Sp]

#define head(Label,Name) \
    .word .L##Label##_end - .L##Label##_start \
.L##Label##_start: \
    .ascii #Name \
    .global Label \
.L##Label##_end: \
Label

#endif

/* vi:set syntax=cpp et ts=4 sw=4: */

