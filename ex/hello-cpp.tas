#define goto(Label)         p <- p + @Label - .
#define call(Target)        [o] <- p + 3 ; o <- o - 1 ; goto(Target)
#define jnz(Cond,Label)     p <- [p + Cond + 2] ; .word @Label ; .word . + 1 ;
#define jnzrel(Cond,Label)  n <- @Label - . - 3 ; n <- Cond & n ; p <- p + n + 1
#define push(Reg)           Reg -> [o] ; o <- o - 1
#define pop(Reg)            o <- o + 1 ; Reg <- [o]
#define ret                 pop(p)

_start:
	b <- 1 << 5         // serial device is at 0x20
    i <- p + @hi - .    // string starts at @hi
    g <- 0xff           // mask
    h <- 8              // shift amount
outer:
	c <- [i]            // load word from string
    i <- i + 1          // increment index for next time
    d <- c == a         // if it is zero, we are done
    jnzrel(d,done)
inner:
    e <- c & g          // mask off top bits
    c <- c >> h         // shift down next character
    d <- e == a         // compare 
    jnzrel(d,outer)     // skip to next word if zero
	[b] <- e            // otherwise, output character
    goto(inner)         // and continue with same word
done:
	illegal
hi:
	.ascii "hello, world"
    .word 0             // mark end of string with a zero

